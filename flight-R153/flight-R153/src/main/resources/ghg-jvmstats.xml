<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed under the GPL License. You may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~   http://probe.jstripe.com/d/license.shtml
  ~
  ~  THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
  ~  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
  ~  WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"       
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd"> 

    <bean name="statsCollection" class="org.jstripe.stats.StatsCollection">
        <!--
        The default location for the stat files is $CATALINA_BASE/work/<hostname>/<context_name>.
        Use this property to override it.
        <property name="storagePath" value="/tmp"/>
        -->
        <property name="swapFileName" value="stats.xml"/>
    </bean>

    <!-- <bean name="/chart.png" class="org.jstripe.controllers.RenderChartController">
        <property name="statsCollection" ref="statsCollection"/>
    </bean> -->

    <!--
        Memory stats collector. Collects absolute usage stats for each of memory pools.
    -->
    <bean name="memoryStatsCollector"
          class="org.jstripe.stats.collectors.JvmMemoryStatsCollector">
        <property name="jvmMemoryAccessor" ref="jvmMemoryAccessor"/>
        <property name="statsCollection" ref="statsCollection"/>
        <property name="maxSeries" value="240"/>
    </bean>

    <bean name="runtimeStatsCollector" class="org.jstripe.stats.collectors.RuntimeStatsCollector">
        <property name="runtimeInfoAccessor" ref="runtimeInfoAccessor"/>
        <property name="statsCollection" ref="statsCollection"/>
        <property name="maxSeries" value="240"/>
    </bean>
    
    <!--
        The name of SeriesProvider beans is passed on the URL, so it should be short enough
    -->
    <bean name="memory_usage" class="org.jstripe.stats.providers.StandardSeriesProvider">
        <property name="statNames">
            <list>
                <value>memory.pool.{0}</value>
            </list>
        </property>
    </bean>

    <bean name="os_memory"  class="org.jstripe.stats.providers.StandardSeriesProvider">
        <property name="statNames">
            <list>
                <value>os.memory.physical</value>
                <value>os.memory.committed</value>
            </list>
        </property>
    </bean>

    <bean name="swap_usage" class="org.jstripe.stats.providers.StandardSeriesProvider">
        <property name="statNames">
            <list>
                <value>os.memory.swap</value>
            </list>
        </property>
    </bean>

    <bean name="cpu_usage" class="org.jstripe.stats.providers.StandardSeriesProvider">
        <property name="statNames">
            <list>
                <value>os.cpu</value>
            </list>
        </property>
    </bean>

    <!--
        Get spring to call method collect() on the "connectorStatsCollector", making the latter a Job
    -->
    <bean id="memoryStatsJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="memoryStatsCollector"/>
        <property name="targetMethod" value="collect"/>
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="runtimeStatsJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="runtimeStatsCollector"/>
        <property name="targetMethod" value="collect"/>
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="statsSerializerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="statsCollection"/>
        <property name="targetMethod" value="serialize"/>
        <property name="concurrent" value="false"/>
    </bean>

    <bean id="memoryStatsTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="memoryStatsJobDetail"/>
        <property name="cronExpression">
            <value>0,30 * * * * ?</value>
        </property>
    </bean>

    <bean id="runtimeStatsTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="runtimeStatsJobDetail"/>
        <property name="cronExpression">
            <value>0,30 * * * * ?</value>
        </property>
    </bean>

    <bean id="statsSerializerTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="statsSerializerJobDetail"/>
        <property name="cronExpression">
            <value>10 * * * * ?</value>
        </property>
    </bean>

    <bean name="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="memoryStatsTrigger"/>
                <ref bean="runtimeStatsTrigger"/>
                <ref bean="statsSerializerTrigger"/>
            </list>
        </property>
    </bean>
    
</beans>
